"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exclude = true;
/**
 * @see https://github.com/bcherny/json-schema-to-typescript/issues/49
 */
exports.input = {
    title: 'Referencing',
    type: 'object',
    properties: {
        foo: {
            $ref: 'https://raw.githubusercontent.com/bcherny/OpenAPI-Specification/ae9322eb2df1555acf3163e30cd84779d98afec5/schemas/v2.0/schema.json'
        }
    },
    required: ['foo'],
    additionalProperties: false
};
exports.output = "/**\n * The transfer protocol of the API.\n */\nexport type SchemesList = (\"http\" | \"https\" | \"ws\" | \"wss\")[];\nexport type MediaTypeList = MimeType[];\nexport type Title = string;\nexport type Description = string;\nexport type Default = any;\nexport type MultipleOf = number;\nexport type Maximum = number;\nexport type ExclusiveMaximum = boolean;\nexport type Minimum = number;\nexport type ExclusiveMinimum = boolean;\nexport type MaxLength = number;\nexport type MinLength = MaxLength;\nexport type Pattern = string;\nexport type UniqueItems = boolean;\nexport type Enum = any[];\nexport type Parameter = (BodyParameter | NonBodyParameter);\nexport type NonBodyParameter = (HeaderParameterSubSchema | FormDataParameterSubSchema | QueryParameterSubSchema | PathParameterSubSchema);\nexport type CollectionFormat = (\"csv\" | \"ssv\" | \"tsv\" | \"pipes\");\nexport type CollectionFormatWithMulti = (\"csv\" | \"ssv\" | \"tsv\" | \"pipes\" | \"multi\");\nexport type Security = SecurityRequirement[];\n\nexport interface Referencing {\n  foo: AJsonSchemaForSwagger20Api;\n}\nexport interface AJsonSchemaForSwagger20Api {\n  /**\n   * The Swagger version of this document.\n   */\n  swagger: \"2.0\";\n  info: Info;\n  /**\n   * The host (name or ip) of the API. Example: 'swagger.io'\n   */\n  host?: string;\n  /**\n   * The base path to the API. Example: '/api'.\n   */\n  basePath?: string;\n  schemes?: SchemesList;\n  /**\n   * A list of MIME types accepted by the API.\n   */\n  consumes?: MediaTypeList;\n  /**\n   * A list of MIME types the API can produce.\n   */\n  produces?: MediaTypeList;\n  paths: Paths;\n  definitions?: Definitions;\n  parameters?: ParameterDefinitions;\n  responses?: ResponseDefinitions;\n  security?: Security;\n  securityDefinitions?: SecurityDefinitions;\n  tags?: Tag[];\n  externalDocs?: ExternalDocs;\n}\n/**\n * General information about the API.\n */\nexport interface Info {\n  /**\n   * A unique and precise title of the API.\n   */\n  title: string;\n  /**\n   * A semantic version number of the API.\n   */\n  version: string;\n  /**\n   * A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The terms of service for the API.\n   */\n  termsOfService?: string;\n  contact?: Contact;\n  license?: License;\n}\n/**\n * Contact information for the owners of the API.\n */\nexport interface Contact {\n  /**\n   * The identifying name of the contact person/organization.\n   */\n  name?: string;\n  /**\n   * The URL pointing to the contact information.\n   */\n  url?: string;\n  /**\n   * The email address of the contact person/organization.\n   */\n  email?: string;\n}\nexport interface License {\n  /**\n   * The name of the license type. It's encouraged to use an OSI compatible license.\n   */\n  name: string;\n  /**\n   * The URL pointing to the license.\n   */\n  url?: string;\n}\n/**\n * Relative paths to the individual endpoints. They must be relative to the 'basePath'.\n */\nexport interface Paths {\n\n}\n/**\n * One or more JSON objects describing the schemas being consumed and produced by the API.\n */\nexport interface Definitions {\n  [k: string]: Schema;\n}\n/**\n * A deterministic version of a JSON Schema object.\n */\nexport interface Schema {\n  $ref?: string;\n  format?: string;\n  title?: Title;\n  description?: Description;\n  default?: Default;\n  multipleOf?: MultipleOf;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  maxProperties?: MaxLength;\n  minProperties?: MinLength;\n  required?: string[];\n  enum?: Enum;\n  additionalProperties?: (Schema | boolean);\n  type?: ((\"array\" | \"boolean\" | \"integer\" | \"null\" | \"number\" | \"object\" | \"string\") | (\"array\" | \"boolean\" | \"integer\" | \"null\" | \"number\" | \"object\" | \"string\")[]);\n  items?: (Schema | Schema[]);\n  allOf?: Schema[];\n  properties?: {\n    [k: string]: Schema;\n  };\n  discriminator?: string;\n  readOnly?: boolean;\n  xml?: Xml;\n  externalDocs?: ExternalDocs;\n  example?: any;\n}\nexport interface Xml {\n  name?: string;\n  namespace?: string;\n  prefix?: string;\n  attribute?: boolean;\n  wrapped?: boolean;\n}\n/**\n * information about external documentation\n */\nexport interface ExternalDocs {\n  description?: string;\n  url: string;\n}\n/**\n * One or more JSON representations for parameters\n */\nexport interface ParameterDefinitions {\n  [k: string]: Parameter;\n}\nexport interface BodyParameter {\n  /**\n   * A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The name of the parameter.\n   */\n  name: string;\n  /**\n   * Determines the location of the parameter.\n   */\n  in: \"body\";\n  /**\n   * Determines whether or not this parameter is required or optional.\n   */\n  required?: boolean;\n  schema: Schema;\n}\nexport interface HeaderParameterSubSchema {\n  /**\n   * Determines whether or not this parameter is required or optional.\n   */\n  required?: boolean;\n  /**\n   * Determines the location of the parameter.\n   */\n  in?: \"header\";\n  /**\n   * A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The name of the parameter.\n   */\n  name?: string;\n  type?: (\"string\" | \"number\" | \"boolean\" | \"integer\" | \"array\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormat;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n}\nexport interface PrimitivesItems {\n  type?: (\"string\" | \"number\" | \"integer\" | \"boolean\" | \"array\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormat;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n}\nexport interface FormDataParameterSubSchema {\n  /**\n   * Determines whether or not this parameter is required or optional.\n   */\n  required?: boolean;\n  /**\n   * Determines the location of the parameter.\n   */\n  in?: \"formData\";\n  /**\n   * A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The name of the parameter.\n   */\n  name?: string;\n  /**\n   * allows sending a parameter by name only or with an empty value.\n   */\n  allowEmptyValue?: boolean;\n  type?: (\"string\" | \"number\" | \"boolean\" | \"integer\" | \"array\" | \"file\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormatWithMulti;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n}\nexport interface QueryParameterSubSchema {\n  /**\n   * Determines whether or not this parameter is required or optional.\n   */\n  required?: boolean;\n  /**\n   * Determines the location of the parameter.\n   */\n  in?: \"query\";\n  /**\n   * A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The name of the parameter.\n   */\n  name?: string;\n  /**\n   * allows sending a parameter by name only or with an empty value.\n   */\n  allowEmptyValue?: boolean;\n  type?: (\"string\" | \"number\" | \"boolean\" | \"integer\" | \"array\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormatWithMulti;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n}\nexport interface PathParameterSubSchema {\n  /**\n   * Determines whether or not this parameter is required or optional.\n   */\n  required: true;\n  /**\n   * Determines the location of the parameter.\n   */\n  in?: \"path\";\n  /**\n   * A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.\n   */\n  description?: string;\n  /**\n   * The name of the parameter.\n   */\n  name?: string;\n  type?: (\"string\" | \"number\" | \"boolean\" | \"integer\" | \"array\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormat;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n}\n/**\n * One or more JSON representations for parameters\n */\nexport interface ResponseDefinitions {\n  [k: string]: Response;\n}\nexport interface Response {\n  description: string;\n  schema?: (Schema | FileSchema);\n  headers?: Headers;\n  examples?: Examples;\n}\n/**\n * A deterministic version of a JSON Schema object.\n */\nexport interface FileSchema {\n  format?: string;\n  title?: Title;\n  description?: Description;\n  default?: Default;\n  required?: string[];\n  type: \"file\";\n  readOnly?: boolean;\n  externalDocs?: ExternalDocs;\n  example?: any;\n}\nexport interface Headers {\n  [k: string]: Header;\n}\nexport interface Header {\n  type: (\"string\" | \"number\" | \"integer\" | \"boolean\" | \"array\");\n  format?: string;\n  items?: PrimitivesItems;\n  collectionFormat?: CollectionFormat;\n  default?: Default;\n  maximum?: Maximum;\n  exclusiveMaximum?: ExclusiveMaximum;\n  minimum?: Minimum;\n  exclusiveMinimum?: ExclusiveMinimum;\n  maxLength?: MaxLength;\n  minLength?: MinLength;\n  pattern?: Pattern;\n  maxItems?: MaxLength;\n  minItems?: MinLength;\n  uniqueItems?: UniqueItems;\n  enum?: Enum;\n  multipleOf?: MultipleOf;\n  description?: string;\n}\nexport interface Examples {\n  [k: string]: any;\n}\nexport interface SecurityDefinitions {\n  [k: string]: (BasicAuthenticationSecurity | ApiKeySecurity | Oauth2ImplicitSecurity | Oauth2PasswordSecurity | Oauth2ApplicationSecurity | Oauth2AccessCodeSecurity);\n}\nexport interface BasicAuthenticationSecurity {\n  type: \"basic\";\n  description?: string;\n}\nexport interface ApiKeySecurity {\n  type: \"apiKey\";\n  name: string;\n  in: (\"header\" | \"query\");\n  description?: string;\n}\nexport interface Oauth2ImplicitSecurity {\n  type: \"oauth2\";\n  flow: \"implicit\";\n  scopes?: Oauth2Scopes;\n  authorizationUrl: string;\n  description?: string;\n}\nexport interface Oauth2Scopes {\n  [k: string]: string;\n}\nexport interface Oauth2PasswordSecurity {\n  type: \"oauth2\";\n  flow: \"password\";\n  scopes?: Oauth2Scopes;\n  tokenUrl: string;\n  description?: string;\n}\nexport interface Oauth2ApplicationSecurity {\n  type: \"oauth2\";\n  flow: \"application\";\n  scopes?: Oauth2Scopes;\n  tokenUrl: string;\n  description?: string;\n}\nexport interface Oauth2AccessCodeSecurity {\n  type: \"oauth2\";\n  flow: \"accessCode\";\n  scopes?: Oauth2Scopes;\n  authorizationUrl: string;\n  tokenUrl: string;\n  description?: string;\n}\n";
//# sourceMappingURL=realWorld.swagger.js.map